// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using HandsOnLab.BO;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;

namespace HandsOnLab.DAL;

public partial class AutomotiveDB3Context : IdentityDbContext
{
    public AutomotiveDB3Context(DbContextOptions<AutomotiveDB3Context> options)
        : base(options)
    {
    }

    public AutomotiveDB3Context()
    {

    }

    public virtual DbSet<Agreement> Agreements { get; set; }

    public virtual DbSet<Car> Cars { get; set; }

    public virtual DbSet<ConsultHistory> ConsultHistories { get; set; }

    public virtual DbSet<Credit> Credits { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<Dealer> Dealers { get; set; }

    public virtual DbSet<DealerCar> DealerCars { get; set; }

    public virtual DbSet<LetterOfIntent> LetterOfIntents { get; set; }

    public virtual DbSet<PaymentHistory> PaymentHistories { get; set; }

    public virtual DbSet<SalesPerson> SalesPeople { get; set; }

    public virtual DbSet<TestDrive> TestDrives { get; set; }

    public virtual DbSet<WarrantyClaim> WarrantyClaims { get; set; }

    public virtual DbSet<WarrantyRegistration> WarrantyRegistrations { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        optionsBuilder.UseSqlServer("Data Source=.\\;Initial Catalog=AutomotiveDB;Integrated Security=True;TrustServerCertificate=True");
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        base.OnModelCreating(modelBuilder);
        modelBuilder.Entity<Agreement>(entity =>
        {
            entity.HasKey(e => e.AgreementId).HasName("PK__Agreemen__0A309D232910C534");

            entity.ToTable("Agreement");

            entity.HasIndex(e => e.LoiId, "UQ__Agreemen__412C029BC5C303B4").IsUnique();

            entity.Property(e => e.AgreementId).HasColumnName("AgreementID");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.Date).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.LoiId).HasColumnName("LoiID");
            entity.Property(e => e.SalesPersonId).HasColumnName("SalesPersonID");

            entity.HasOne(d => d.Customer).WithMany(p => p.Agreements)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Agreement__Custo__5CD6CB2B");

            entity.HasOne(d => d.Loi).WithOne(p => p.Agreement)
                .HasForeignKey<Agreement>(d => d.LoiId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Agreement__LoiID__5441852A");

            entity.HasOne(d => d.SalesPerson).WithMany(p => p.Agreements)
                .HasForeignKey(d => d.SalesPersonId)
                .HasConstraintName("FK__Agreement__Sales__5EBF139D");
        });

        modelBuilder.Entity<Car>(entity =>
        {
            entity.HasKey(e => e.CarId).HasName("PK__Car__68A0340E77F06A5D");

            entity.ToTable("Car");

            //entity.HasIndex(e => e.VId, "UQ__Car__A2B0D9F1C3E4F5B6").IsUnique();
            entity.Property(e => e.CarId).HasColumnName("CarID");
            entity.Property(e => e.Color)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Model)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Stock).HasDefaultValue(0);
            entity.Property(e => e.Type)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ConsultHistory>(entity =>
        {
            entity.HasKey(e => e.ConsultId).HasName("PK__ConsultH__28859B15882A2E42");

            entity.ToTable("ConsultHistory");

            entity.Property(e => e.ConsultId).HasColumnName("ConsultID");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.Date).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.Note).HasColumnType("text");
            entity.Property(e => e.SalesPersonId).HasColumnName("SalesPersonID");

            entity.HasOne(d => d.Customer).WithMany(p => p.ConsultHistories)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ConsultHi__Custo__5FB337D6");

            entity.HasOne(d => d.SalesPerson).WithMany(p => p.ConsultHistories)
                .HasForeignKey(d => d.SalesPersonId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ConsultHi__Sales__60A75C0F");
        });

        modelBuilder.Entity<Credit>(entity =>
        {
            entity.HasKey(e => e.CreditId).HasName("PK__Credit__ED5ED09B313A4DA0");

            entity.ToTable("Credit");

            entity.HasIndex(e => e.AgreementId, "UQ__Credit__0A309D22EE83FE0C").IsUnique();

            entity.Property(e => e.CreditId).HasColumnName("CreditID");
            entity.Property(e => e.AgreementId).HasColumnName("AgreementID");
            entity.Property(e => e.CreditStatus)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.Agreement).WithOne(p => p.Credit)
                .HasForeignKey<Credit>(d => d.AgreementId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Credit__Agreemen__619B8048");
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.HasKey(e => e.CustomerId).HasName("PK__Customer__A4AE64B8E6A3B661");

            entity.ToTable("Customer");

            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.Address).HasColumnType("text");
            entity.Property(e => e.CardId)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CardID");
            entity.Property(e => e.Email)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(15)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Dealer>(entity =>
        {
            entity.HasKey(e => e.DealerId).HasName("PK__Dealer__CA2F8E92D9559A98");

            entity.ToTable("Dealer");

            entity.Property(e => e.DealerId).HasColumnName("DealerID");
            entity.Property(e => e.Address).HasColumnType("text");
            entity.Property(e => e.Email)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(15)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DealerCar>(entity =>
        {
            entity.HasKey(e => e.DealerCarId).HasName("PK__DealerCa__7DD0B566538D77B1");

            entity.ToTable("DealerCar");

            entity.Property(e => e.DealerCarId).HasColumnName("DealerCarID");
            entity.Property(e => e.CarId).HasColumnName("CarID");
            entity.Property(e => e.DealerId).HasColumnName("DealerID");

            entity.HasOne(d => d.Car).WithMany(p => p.DealerCars)
                .HasForeignKey(d => d.CarId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__DealerCar__CarID__628FA481");

            entity.HasOne(d => d.Dealer).WithMany(p => p.DealerCars)
                .HasForeignKey(d => d.DealerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__DealerCar__Deale__6383C8BA");
        });

        modelBuilder.Entity<LetterOfIntent>(entity =>
        {
            entity.HasKey(e => e.LoiId).HasName("PK__LetterOf__412C029A7A1372A8");

            entity.ToTable("LetterOfIntent");

            entity.Property(e => e.LoiId).HasColumnName("LoiID");
            entity.Property(e => e.DealerCarId).HasColumnName("DealerCarID");
            entity.Property(e => e.PaymentMethod)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.DealerCar).WithMany(p => p.LetterOfIntents)
                .HasForeignKey(d => d.DealerCarId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__LetterOfI__Deale__4F7CD00D");
        });

        modelBuilder.Entity<PaymentHistory>(entity =>
        {
            entity.HasKey(e => e.PaymentId).HasName("PK__PaymentH__9B556A58E7EC8DDF");

            entity.ToTable("PaymentHistory");

            entity.Property(e => e.PaymentId).HasColumnName("PaymentID");
            entity.Property(e => e.AgreementId).HasColumnName("AgreementID");
            entity.Property(e => e.Date).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Agreement).WithMany(p => p.PaymentHistories)
                .HasForeignKey(d => d.AgreementId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__PaymentHi__Agree__656C112C");
        });

        modelBuilder.Entity<SalesPerson>(entity =>
        {
            entity.HasKey(e => e.SalesId).HasName("PK__SalesPer__C952FB1235E0F6CE");

            entity.ToTable("SalesPerson");

            entity.Property(e => e.SalesId).HasColumnName("SalesID");
            entity.Property(e => e.DealerId).HasColumnName("DealerID");
            entity.Property(e => e.Email)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(15)
                .IsUnicode(false);

            entity.HasOne(d => d.Dealer).WithMany(p => p.SalesPeople)
                .HasForeignKey(d => d.DealerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__SalesPers__Deale__66603565");
        });

        modelBuilder.Entity<TestDrive>(entity =>
        {
            entity.HasKey(e => e.TestDriveId).HasName("PK__TestDriv__BF98EF728A76C646");

            entity.ToTable("TestDrive");

            entity.Property(e => e.TestDriveId).HasColumnName("TestDriveID");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.Date).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.DealerCarId).HasColumnName("DealerCarID");
            entity.Property(e => e.Feedback)
                .HasColumnType("text")
                .HasColumnName("feedback");
            entity.Property(e => e.SalesPersonId).HasColumnName("SalesPersonID");

            entity.HasOne(d => d.Customer).WithMany(p => p.TestDrives)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__TestDrive__Custo__68487DD7");

            entity.HasOne(d => d.DealerCar).WithMany(p => p.TestDrives)
                .HasForeignKey(d => d.DealerCarId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__TestDrive__Deale__6754599E");

            entity.HasOne(d => d.SalesPerson).WithMany(p => p.TestDrives)
                .HasForeignKey(d => d.SalesPersonId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__TestDrive__Sales__693CA210");
        });

        modelBuilder.Entity<WarrantyClaim>(entity =>
        {
            entity.HasKey(e => e.ClaimId).HasName("PK__Warranty__EF2E13BB5AEAA3B4");

            entity.ToTable("WarrantyClaim");

            entity.Property(e => e.ClaimId).HasColumnName("ClaimID");
            entity.Property(e => e.ClaimStatus)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IssueReported)
                .IsRequired()
                .HasColumnType("text");
            entity.Property(e => e.ServiceCenter)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.WarrantyId).HasColumnName("WarrantyID");

            entity.HasOne(d => d.Warranty).WithMany(p => p.WarrantyClaims)
                .HasForeignKey(d => d.WarrantyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__WarrantyC__Warra__6A30C649");
        });

        modelBuilder.Entity<WarrantyRegistration>(entity =>
        {
            entity.HasKey(e => e.WarrantyId).HasName("PK__Warranty__2ED318F3EDE5B9B7");

            entity.ToTable("WarrantyRegistration");

            entity.HasIndex(e => e.PurchaseId, "UQ__Warranty__6B0A6BDFD401A47A").IsUnique();

            entity.Property(e => e.WarrantyId).HasColumnName("WarrantyID");
            entity.Property(e => e.CarId).HasColumnName("CarID");
            entity.Property(e => e.PurchaseId).HasColumnName("PurchaseID");

            entity.HasOne(d => d.Car).WithMany(p => p.WarrantyRegistrations)
                .HasForeignKey(d => d.CarId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__WarrantyR__CarID__6B24EA82");

            entity.HasOne(d => d.Purchase).WithOne(p => p.WarrantyRegistration)
                .HasForeignKey<WarrantyRegistration>(d => d.PurchaseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__WarrantyR__Purch__6C190EBB");
        });

        OnModelCreatingPartial(modelBuilder);

        //// Car
        //modelBuilder.Entity<Car>().HasData(
        //    new Car { CarId = 1, Model = "Xpander Sport", Type = "MPV", BasePrice = 255000000, Color = "Hitam", Stock = 5 },
        //    new Car { CarId = 2, Model = "L300 2025", Type = "Commercial", BasePrice = 232500000, Color = "Putih", Stock = 30 },
        //    new Car { CarId = 3, Model = "Pajero", Type = "SUV", BasePrice = 577700000, Color = "Silver", Stock = 25 },
        //    new Car { CarId = 4, Model = "XForce", Type = "SUV", BasePrice = 450000000, Color = "Merah", Stock = 10 },
        //    new Car { CarId = 5, Model = "Destinator Dynamic", Type = "SUV", BasePrice = 600000000, Color = "Orange", Stock = 10 },
        //    new Car { CarId = 6, Model = "Xpander Cross 2025", Type = "MVP", BasePrice = 300000000, Color = "Hitam", Stock = 10 },
        //    new Car { CarId = 7, Model = "Destinator Prime", Type = "SUV", BasePrice = 450000000, Color = "Green", Stock = 5 },
        //    new Car { CarId = 9, Model = "Type Y", Type = "Sedan", BasePrice = 700000000, Color = "Red", Stock = 10 },
        //    new Car { CarId = 12, Model = "Xpander Ultimate 2025", Type = "MPV", BasePrice = 250000000, Color = "Hitam", Stock = 3 },
        //    new Car { CarId = 14, Model = "Destinator X", Type = "SUV", BasePrice = 700000000, Color = "Hitam", Stock = 5 }
        //);

        //// Customer
        //modelBuilder.Entity<Customer>().HasData(
        //    new Customer { CustomerId = 1, Name = "Jefri", CardId = "JT123444", Address = "Jl. Maju Terus gg.4 No.7, Jawa Timur", PhoneNumber = "081234567890", Email = "JefriTampang34@gmail.com" },
        //    new Customer { CustomerId = 2, Name = "Jason", CardId = "DKI10056", Address = "Jl. Kemana Aja IV No.30, Jakarta", PhoneNumber = "081234567891", Email = "JazzJason77@gmail.com" },
        //    new Customer { CustomerId = 3, Name = "Juliet Romeo", CardId = "MT964903", Address = "Jl. Tapi Mager 2 No.2, Medan", PhoneNumber = "08123488888", Email = "citra@mail.com" },
        //    new Customer { CustomerId = 4, Name = "Bob", CardId = "BK9837945", Address = "Jl. Kebayoran 8 no.104, Bekasi", PhoneNumber = "08130234289", Email = "Nyeenya3@gmail.com" },
        //    new Customer { CustomerId = 5, Name = "Budi", CardId = "678976544667", Address = "JL Mangga 12", PhoneNumber = "9988778899", Email = "budi@gmail.com" },
        //    new Customer { CustomerId = 8, Name = "Cloud", CardId = "88997733", Address = "JL Jeruk 77", PhoneNumber = "445566", Email = "cloud@gmail.com" },
        //    new Customer { CustomerId = 14, Name = "Anas", CardId = "889988", Address = "JL Salak Pondoh 88", PhoneNumber = "445566", Email = "anas@gmail.com" },
        //    new Customer { CustomerId = 15, Name = "Anas aja", CardId = "889988", Address = "JL Salak Pondoh 88", PhoneNumber = "445566", Email = "anas@gmail.com" }
        //);

        //// Dealer
        //modelBuilder.Entity<Dealer>().HasData(
        //    new Dealer { DealerId = 1, Name = "Dealer Srikandi", Address = "Jl. Jendral Sudirman", PhoneNumber = "02195633556", Email = "dealersrikandi@gmail.com", Status = 1 },
        //    new Dealer { DealerId = 2, Name = "Dealer Berlian", Address = "Jl. Gatot Subroto", PhoneNumber = "02106745678", Email = "dealerberlian@mail.com", Status = 1 },
        //    new Dealer { DealerId = 3, Name = "Dealer Yudha", Address = "Jl. Thamrin", PhoneNumber = "021895363", Email = "dealeryudha@mail.com", Status = 0 },
        //    new Dealer { DealerId = 5, Name = "Dealer Arjuna", Address = "JL Arjuna 78", PhoneNumber = "021067456865", Email = "dealerarjuna@mail.com", Status = 1 }
        //);

        //// SalesPerson
        //modelBuilder.Entity<SalesPerson>().HasData(
        //    new SalesPerson { SalesId = 1, Name = "Dina", DealerId = 1, PhoneNumber = "081234567001", Email = "dinasrikandi@gmail.com" },
        //    new SalesPerson { SalesId = 2, Name = "Eko", DealerId = 2, PhoneNumber = "081234567002", Email = "ekoberlian@mail.com" },
        //    new SalesPerson { SalesId = 3, Name = "Farah", DealerId = 1, PhoneNumber = "081234567003", Email = "farahsrikandi@gmail.com" },
        //    new SalesPerson { SalesId = 4, Name = "Nurul", DealerId = 2, PhoneNumber = "088992203427", Email = "Nurulsales@gmail.com" }
        //);

        //// DealerCar
        //modelBuilder.Entity<DealerCar>().HasData(
        //    new DealerCar { DealerCarId = 1, CarId = 6, DealerId = 2, Price = 350000000, Stock = 20, DiscountPercent = 10, FeePercent = 2 },
        //    new DealerCar { DealerCarId = 2, CarId = 1, DealerId = 1, Price = 291500000, Stock = 30, DiscountPercent = 8, FeePercent = 1 },
        //    new DealerCar { DealerCarId = 3, CarId = 2, DealerId = 2, Price = 253700000, Stock = 14, DiscountPercent = 8.5, FeePercent = 1 },
        //    new DealerCar { DealerCarId = 4, CarId = 5, DealerId = 5, Price = 650000000, Stock = 10, DiscountPercent = 5, FeePercent = 1 },
        //    new DealerCar { DealerCarId = 5, CarId = 4, DealerId = 3, Price = 400000000, Stock = 10, DiscountPercent = 10, FeePercent = 1 },
        //    new DealerCar { DealerCarId = 7, CarId = 3, DealerId = 2, Price = 550000000, Stock = 10, DiscountPercent = 5, FeePercent = 1 },
        //    new DealerCar { DealerCarId = 10, CarId = 4, DealerId = 2, Price = 355000000, Stock = 5, DiscountPercent = 10, FeePercent = 2 },
        //    new DealerCar { DealerCarId = 12, CarId = 6, DealerId = 3, Price = 355000000, Stock = 6, DiscountPercent = 10, FeePercent = 2 }
        //);

    }


    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}