// <auto-generated />
using System;
using HandsOnLab.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HandsOnLab.DAL.Migrations
{
    [DbContext(typeof(AutomotiveDB3Context))]
    partial class AutomotiveDB3ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HandsOnLab.BO.Agreement", b =>
                {
                    b.Property<int>("AgreementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AgreementID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AgreementId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<DateOnly?>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("LoiId")
                        .HasColumnType("int")
                        .HasColumnName("LoiID");

                    b.Property<int?>("SalesPersonId")
                        .HasColumnType("int")
                        .HasColumnName("SalesPersonID");

                    b.HasKey("AgreementId")
                        .HasName("PK__Agreemen__0A309D232910C534");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SalesPersonId");

                    b.HasIndex(new[] { "LoiId" }, "UQ__Agreemen__412C029BC5C303B4")
                        .IsUnique();

                    b.ToTable("Agreement", (string)null);
                });

            modelBuilder.Entity("HandsOnLab.BO.Car", b =>
                {
                    b.Property<int>("CarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CarID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarId"));

                    b.Property<double?>("BasePrice")
                        .HasColumnType("float");

                    b.Property<string>("Color")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("Stock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Type")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("CarId")
                        .HasName("PK__Car__68A0340E77F06A5D");

                    b.ToTable("Car", (string)null);
                });

            modelBuilder.Entity("HandsOnLab.BO.ConsultHistory", b =>
                {
                    b.Property<int>("ConsultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ConsultID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConsultId"));

                    b.Property<double?>("Budget")
                        .HasColumnType("float");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<DateOnly?>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("SalesPersonId")
                        .HasColumnType("int")
                        .HasColumnName("SalesPersonID");

                    b.HasKey("ConsultId")
                        .HasName("PK__ConsultH__28859B15882A2E42");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SalesPersonId");

                    b.ToTable("ConsultHistory", (string)null);
                });

            modelBuilder.Entity("HandsOnLab.BO.Credit", b =>
                {
                    b.Property<int>("CreditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CreditID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CreditId"));

                    b.Property<int>("AgreementId")
                        .HasColumnType("int")
                        .HasColumnName("AgreementID");

                    b.Property<double>("CreditAmount")
                        .HasColumnType("float");

                    b.Property<string>("CreditStatus")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<double>("InterestRate")
                        .HasColumnType("float");

                    b.Property<double>("MonthlyPaymentAmount")
                        .HasColumnType("float");

                    b.Property<bool>("PaidFully")
                        .HasColumnType("bit");

                    b.Property<int?>("Tenor")
                        .HasColumnType("int");

                    b.HasKey("CreditId")
                        .HasName("PK__Credit__ED5ED09B313A4DA0");

                    b.HasIndex(new[] { "AgreementId" }, "UQ__Credit__0A309D22EE83FE0C")
                        .IsUnique();

                    b.ToTable("Credit", (string)null);
                });

            modelBuilder.Entity("HandsOnLab.BO.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("CardId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("CardID");

                    b.Property<string>("Email")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("CustomerId")
                        .HasName("PK__Customer__A4AE64B8E6A3B661");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("HandsOnLab.BO.Dealer", b =>
                {
                    b.Property<int>("DealerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DealerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DealerId"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("DealerId")
                        .HasName("PK__Dealer__CA2F8E92D9559A98");

                    b.ToTable("Dealer", (string)null);
                });

            modelBuilder.Entity("HandsOnLab.BO.DealerCar", b =>
                {
                    b.Property<int>("DealerCarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DealerCarID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DealerCarId"));

                    b.Property<int>("CarId")
                        .HasColumnType("int")
                        .HasColumnName("CarID");

                    b.Property<int>("DealerId")
                        .HasColumnType("int")
                        .HasColumnName("DealerID");

                    b.Property<double?>("DiscountPercent")
                        .HasColumnType("float");

                    b.Property<double?>("FeePercent")
                        .HasColumnType("float");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("DealerCarId")
                        .HasName("PK__DealerCa__7DD0B566538D77B1");

                    b.HasIndex("CarId");

                    b.HasIndex("DealerId");

                    b.ToTable("DealerCar", (string)null);
                });

            modelBuilder.Entity("HandsOnLab.BO.LetterOfIntent", b =>
                {
                    b.Property<int>("LoiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LoiID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoiId"));

                    b.Property<int>("DealerCarId")
                        .HasColumnType("int")
                        .HasColumnName("DealerCarID");

                    b.Property<double?>("DiscountAmount")
                        .HasColumnType("float");

                    b.Property<double?>("DownPayment")
                        .HasColumnType("float");

                    b.Property<double?>("FeeAmount")
                        .HasColumnType("float");

                    b.Property<double>("FinalPrice")
                        .HasColumnType("float");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("LoiId")
                        .HasName("PK__LetterOf__412C029A7A1372A8");

                    b.HasIndex("DealerCarId");

                    b.ToTable("LetterOfIntent", (string)null);
                });

            modelBuilder.Entity("HandsOnLab.BO.PaymentHistory", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PaymentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<int>("AgreementId")
                        .HasColumnType("int")
                        .HasColumnName("AgreementID");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateOnly?>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("PaymentNumber")
                        .HasColumnType("int");

                    b.HasKey("PaymentId")
                        .HasName("PK__PaymentH__9B556A58E7EC8DDF");

                    b.HasIndex("AgreementId");

                    b.ToTable("PaymentHistory", (string)null);
                });

            modelBuilder.Entity("HandsOnLab.BO.SalesPerson", b =>
                {
                    b.Property<int>("SalesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SalesID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalesId"));

                    b.Property<int>("DealerId")
                        .HasColumnType("int")
                        .HasColumnName("DealerID");

                    b.Property<string>("Email")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("SalesId")
                        .HasName("PK__SalesPer__C952FB1235E0F6CE");

                    b.HasIndex("DealerId");

                    b.ToTable("SalesPerson", (string)null);
                });

            modelBuilder.Entity("HandsOnLab.BO.TestDrive", b =>
                {
                    b.Property<int>("TestDriveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TestDriveID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestDriveId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<DateOnly?>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("DealerCarId")
                        .HasColumnType("int")
                        .HasColumnName("DealerCarID");

                    b.Property<string>("Feedback")
                        .HasColumnType("text")
                        .HasColumnName("feedback");

                    b.Property<int>("SalesPersonId")
                        .HasColumnType("int")
                        .HasColumnName("SalesPersonID");

                    b.HasKey("TestDriveId")
                        .HasName("PK__TestDriv__BF98EF728A76C646");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DealerCarId");

                    b.HasIndex("SalesPersonId");

                    b.ToTable("TestDrive", (string)null);
                });

            modelBuilder.Entity("HandsOnLab.BO.WarrantyClaim", b =>
                {
                    b.Property<int>("ClaimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClaimID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClaimId"));

                    b.Property<string>("ClaimStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("IssueReported")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("RepairCost")
                        .HasColumnType("float");

                    b.Property<DateOnly>("RepairDate")
                        .HasColumnType("date");

                    b.Property<string>("ServiceCenter")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("WarrantyId")
                        .HasColumnType("int")
                        .HasColumnName("WarrantyID");

                    b.HasKey("ClaimId")
                        .HasName("PK__Warranty__EF2E13BB5AEAA3B4");

                    b.HasIndex("WarrantyId");

                    b.ToTable("WarrantyClaim", (string)null);
                });

            modelBuilder.Entity("HandsOnLab.BO.WarrantyRegistration", b =>
                {
                    b.Property<int>("WarrantyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WarrantyID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WarrantyId"));

                    b.Property<int>("CarId")
                        .HasColumnType("int")
                        .HasColumnName("CarID");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("int")
                        .HasColumnName("PurchaseID");

                    b.Property<int?>("WarrantyPeriodMonths")
                        .HasColumnType("int");

                    b.HasKey("WarrantyId")
                        .HasName("PK__Warranty__2ED318F3EDE5B9B7");

                    b.HasIndex("CarId");

                    b.HasIndex(new[] { "PurchaseId" }, "UQ__Warranty__6B0A6BDFD401A47A")
                        .IsUnique();

                    b.ToTable("WarrantyRegistration", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HandsOnLab.BO.Agreement", b =>
                {
                    b.HasOne("HandsOnLab.BO.Customer", "Customer")
                        .WithMany("Agreements")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__Agreement__Custo__5CD6CB2B");

                    b.HasOne("HandsOnLab.BO.LetterOfIntent", "Loi")
                        .WithOne("Agreement")
                        .HasForeignKey("HandsOnLab.BO.Agreement", "LoiId")
                        .IsRequired()
                        .HasConstraintName("FK__Agreement__LoiID__5441852A");

                    b.HasOne("HandsOnLab.BO.SalesPerson", "SalesPerson")
                        .WithMany("Agreements")
                        .HasForeignKey("SalesPersonId")
                        .HasConstraintName("FK__Agreement__Sales__5EBF139D");

                    b.Navigation("Customer");

                    b.Navigation("Loi");

                    b.Navigation("SalesPerson");
                });

            modelBuilder.Entity("HandsOnLab.BO.ConsultHistory", b =>
                {
                    b.HasOne("HandsOnLab.BO.Customer", "Customer")
                        .WithMany("ConsultHistories")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__ConsultHi__Custo__5FB337D6");

                    b.HasOne("HandsOnLab.BO.SalesPerson", "SalesPerson")
                        .WithMany("ConsultHistories")
                        .HasForeignKey("SalesPersonId")
                        .IsRequired()
                        .HasConstraintName("FK__ConsultHi__Sales__60A75C0F");

                    b.Navigation("Customer");

                    b.Navigation("SalesPerson");
                });

            modelBuilder.Entity("HandsOnLab.BO.Credit", b =>
                {
                    b.HasOne("HandsOnLab.BO.Agreement", "Agreement")
                        .WithOne("Credit")
                        .HasForeignKey("HandsOnLab.BO.Credit", "AgreementId")
                        .IsRequired()
                        .HasConstraintName("FK__Credit__Agreemen__619B8048");

                    b.Navigation("Agreement");
                });

            modelBuilder.Entity("HandsOnLab.BO.DealerCar", b =>
                {
                    b.HasOne("HandsOnLab.BO.Car", "Car")
                        .WithMany("DealerCars")
                        .HasForeignKey("CarId")
                        .IsRequired()
                        .HasConstraintName("FK__DealerCar__CarID__628FA481");

                    b.HasOne("HandsOnLab.BO.Dealer", "Dealer")
                        .WithMany("DealerCars")
                        .HasForeignKey("DealerId")
                        .IsRequired()
                        .HasConstraintName("FK__DealerCar__Deale__6383C8BA");

                    b.Navigation("Car");

                    b.Navigation("Dealer");
                });

            modelBuilder.Entity("HandsOnLab.BO.LetterOfIntent", b =>
                {
                    b.HasOne("HandsOnLab.BO.DealerCar", "DealerCar")
                        .WithMany("LetterOfIntents")
                        .HasForeignKey("DealerCarId")
                        .IsRequired()
                        .HasConstraintName("FK__LetterOfI__Deale__4F7CD00D");

                    b.Navigation("DealerCar");
                });

            modelBuilder.Entity("HandsOnLab.BO.PaymentHistory", b =>
                {
                    b.HasOne("HandsOnLab.BO.Agreement", "Agreement")
                        .WithMany("PaymentHistories")
                        .HasForeignKey("AgreementId")
                        .IsRequired()
                        .HasConstraintName("FK__PaymentHi__Agree__656C112C");

                    b.Navigation("Agreement");
                });

            modelBuilder.Entity("HandsOnLab.BO.SalesPerson", b =>
                {
                    b.HasOne("HandsOnLab.BO.Dealer", "Dealer")
                        .WithMany("SalesPeople")
                        .HasForeignKey("DealerId")
                        .IsRequired()
                        .HasConstraintName("FK__SalesPers__Deale__66603565");

                    b.Navigation("Dealer");
                });

            modelBuilder.Entity("HandsOnLab.BO.TestDrive", b =>
                {
                    b.HasOne("HandsOnLab.BO.Customer", "Customer")
                        .WithMany("TestDrives")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__TestDrive__Custo__68487DD7");

                    b.HasOne("HandsOnLab.BO.DealerCar", "DealerCar")
                        .WithMany("TestDrives")
                        .HasForeignKey("DealerCarId")
                        .IsRequired()
                        .HasConstraintName("FK__TestDrive__Deale__6754599E");

                    b.HasOne("HandsOnLab.BO.SalesPerson", "SalesPerson")
                        .WithMany("TestDrives")
                        .HasForeignKey("SalesPersonId")
                        .IsRequired()
                        .HasConstraintName("FK__TestDrive__Sales__693CA210");

                    b.Navigation("Customer");

                    b.Navigation("DealerCar");

                    b.Navigation("SalesPerson");
                });

            modelBuilder.Entity("HandsOnLab.BO.WarrantyClaim", b =>
                {
                    b.HasOne("HandsOnLab.BO.WarrantyRegistration", "Warranty")
                        .WithMany("WarrantyClaims")
                        .HasForeignKey("WarrantyId")
                        .IsRequired()
                        .HasConstraintName("FK__WarrantyC__Warra__6A30C649");

                    b.Navigation("Warranty");
                });

            modelBuilder.Entity("HandsOnLab.BO.WarrantyRegistration", b =>
                {
                    b.HasOne("HandsOnLab.BO.Car", "Car")
                        .WithMany("WarrantyRegistrations")
                        .HasForeignKey("CarId")
                        .IsRequired()
                        .HasConstraintName("FK__WarrantyR__CarID__6B24EA82");

                    b.HasOne("HandsOnLab.BO.Agreement", "Purchase")
                        .WithOne("WarrantyRegistration")
                        .HasForeignKey("HandsOnLab.BO.WarrantyRegistration", "PurchaseId")
                        .IsRequired()
                        .HasConstraintName("FK__WarrantyR__Purch__6C190EBB");

                    b.Navigation("Car");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HandsOnLab.BO.Agreement", b =>
                {
                    b.Navigation("Credit");

                    b.Navigation("PaymentHistories");

                    b.Navigation("WarrantyRegistration");
                });

            modelBuilder.Entity("HandsOnLab.BO.Car", b =>
                {
                    b.Navigation("DealerCars");

                    b.Navigation("WarrantyRegistrations");
                });

            modelBuilder.Entity("HandsOnLab.BO.Customer", b =>
                {
                    b.Navigation("Agreements");

                    b.Navigation("ConsultHistories");

                    b.Navigation("TestDrives");
                });

            modelBuilder.Entity("HandsOnLab.BO.Dealer", b =>
                {
                    b.Navigation("DealerCars");

                    b.Navigation("SalesPeople");
                });

            modelBuilder.Entity("HandsOnLab.BO.DealerCar", b =>
                {
                    b.Navigation("LetterOfIntents");

                    b.Navigation("TestDrives");
                });

            modelBuilder.Entity("HandsOnLab.BO.LetterOfIntent", b =>
                {
                    b.Navigation("Agreement");
                });

            modelBuilder.Entity("HandsOnLab.BO.SalesPerson", b =>
                {
                    b.Navigation("Agreements");

                    b.Navigation("ConsultHistories");

                    b.Navigation("TestDrives");
                });

            modelBuilder.Entity("HandsOnLab.BO.WarrantyRegistration", b =>
                {
                    b.Navigation("WarrantyClaims");
                });
#pragma warning restore 612, 618
        }
    }
}
